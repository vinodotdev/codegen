

{{#eachNamespace components=components namespace=namespace}}
  // start namespace {{namespace}}
  {{#if namespace}}
  pub mod {{moduleName namespace}} {
  {{> wasm-modules components=subComponents  namespace=namespace}}
  } // end namespace {{namespace}}
  {{else}}
    {{#each components}}
    pub mod {{moduleLeafName name}} {
      use crate::components::{{moduleName name}} as implementation;

      #[cfg(all(feature = "native", not(feature="wasm")))]
      pub use vino_provider::native::prelude::*;
      #[cfg(all(feature = "wasm", not(feature="native")))]
      pub use vino_provider::wasm::prelude::*;

      #[derive(Default)]
      pub struct Component {}

      impl WapcComponent for Component {
        fn execute(&self, payload: &IncomingPayload) -> JobResult {
          let outputs = get_outputs(payload.id());
          let inputs = populate_inputs(payload)?;
          implementation::job(inputs, outputs)
        }
      }

        {{> inputs inputs }}
        {{> outputs outputs }}
    }
  {{/each}}
  {{/if}}

{{/eachNamespace}}



