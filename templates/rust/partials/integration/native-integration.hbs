/**********************************************
***** This file is generated, do not edit *****
***********************************************/

pub use vino_provider::prelude::*;

{{> component-imports components=interface.components namespace="" }}
pub mod __multi__;

#[derive(Debug)]
pub(crate) struct Dispatcher {}
#[async_trait]
impl Dispatch for Dispatcher {
  type Context = crate::Context;
  async fn dispatch(
    op: &str,
    context: Self::Context,
    data: TransportMap,
  ) -> Result<TransportStream, Box<NativeComponentError>>{
    let result = match op {
      {{#each interface.components}}
        "{{ name }}" => self::generated::{{moduleName name}}::Component::default().execute(context, data).await,
      {{/each}}
      "__multi__" => {
        self::generated::__multi__::Component::default()
          .execute(context, data)
          .await
      }
      _ => Err(Box::new(NativeComponentError::new(format!(
        "Component not found on this provider: {}",
        op
      )))),
    }?;
    Ok(result)
  }
}

pub fn get_signature() -> ProviderSignature {
  let mut components = std::collections::HashMap::new();

  {{#each interface.components}}
    components.insert("{{name}}", {{#ifCond @root.type '!==' 'wellknown'}}generated{{else}}{{snakeCase @root.interface.name}}{{/ifCond}}::{{moduleName name}}::signature());
  {{/each}}

  {{> provider-signature interface}}
}

{{> types interface }}

pub mod generated {
  {{> native-modules components=interface.components namespace=""}}

  pub mod __multi__ {
    {{#ifCond @root.type '===' 'wellknown'}}
    #![allow(unused)]
    use {{snakeCase @root.interface.name}}::__multi__::*;
    {{else}}

    #[derive(Debug, serde::Deserialize, serde::Serialize, Clone)]
    pub enum ComponentInputs {
      {{#each interface.components}}
        {{pascalCase name}}(super::{{moduleName name}}::Inputs),
      {{/each}}
    }

    #[cfg(all(feature = "guest"))]
    #[allow(missing_debug_implementations)]
    pub enum ComponentOutputs {
      {{#each interface.components}}
        {{pascalCase name}}(super::{{moduleName name}}::Outputs),
      {{/each}}
    }
    #[cfg(any(feature = "native"))]
    pub use vino_provider::native::prelude::*;
    #[cfg(any(feature = "wasm"))]
    pub use vino_provider::wasm::prelude::*;

    {{> native-outputs multi.outputs }}
    {{/ifCond}}
    use async_trait::async_trait;

    pub use vino_provider::prelude::*;

    #[derive(Default, Copy, Clone, Debug)]
    pub struct Component {}

    #[async_trait]
    impl NativeComponent for Component {
      type Context = crate::Context;
      async fn execute(
        &self,
        context: Self::Context,
        data: TransportMap,
      ) -> Result<TransportStream, Box<NativeComponentError>> {
        let inputs = populate_inputs(data).map_err(|e| NativeComponentError::new(e.to_string()))?;
        let (outputs, stream) = get_outputs();
        let result = tokio::spawn(crate::components::__multi__::job(inputs, outputs, context))
          .await
          .map_err(|e| {
            Box::new(NativeComponentError::new(format!(
              "Component error: {}",
              e
            )))
          })?;
        match result {
          Ok(_) => Ok(stream),
          Err(e) => Err(Box::new(NativeComponentError::new(e.to_string()))),
        }
      }
    }

    pub fn populate_inputs(mut payload: TransportMap) -> Result<Vec<ComponentInputs>, TransportError> {
      payload.consume::<Vec<ComponentInputs>>("inputs")
    }

  }
}
